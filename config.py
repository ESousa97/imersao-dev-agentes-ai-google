# -*- coding: utf-8 -*-
"""
Configura√ß√µes do Agente Curador de Contexto Pessoal
"""

import os

class Config:
    # API e Modelos
    GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
    GEMINI_MODEL = "gemini-1.5-flash"
    EMBEDDING_MODEL = "models/text-embedding-004"
    
    # Banco de Dados
    SQLITE_PATH = "./agent_memory.db"
    CHROMA_PATH = "./chroma_mem"
    
    # Limites e Performance
    MAX_TEXT_LENGTH = 12000  # chars para curadoria
    MAX_MEMORIES_CONTEXT = 15  # mem√≥rias por contexto
    MAX_SEARCH_RESULTS = 10
    
    # Nudges e Proatividade
    GOAL_STALL_DAYS = 5      # dias sem movimento para nudge
    DEADLINE_WARNING_DAYS = 3 # dias antes do prazo para alerta
    REPEATED_BLOCKER_COUNT = 3 # vezes para considerar bloqueio repetido
    
    # Reflex√£o
    DEFAULT_REFLECTION_DAYS = 14
    MAX_NUDGES_PER_TYPE = 3
    
    # CLI
    DEFAULT_SEARCH_LIMIT = 10
    MENU_WIDTH = 60

# Prompts do sistema (centralizados para f√°cil ajuste)
PROMPTS = {
    "curadoria": """Voc√™ √© um curador de contexto pessoal. Extraia do texto os campos espec√≠ficos e responda APENAS com JSON v√°lido no seguinte esquema:

{
  "facts": ["fato objetivo 1", "fato objetivo 2"],
  "decisions": ["decis√£o tomada 1", "decis√£o tomada 2"],
  "goals": ["meta declarada ou impl√≠cita 1", "meta 2"],
  "blockers": ["impedimento ou obst√°culo 1", "bloqueio 2"],
  "questions": ["pergunta aberta 1", "d√∫vida 2"],
  "deadlines": ["YYYY-MM-DD formato ISO se houver data espec√≠fica"],
  "sentiment": "pos" | "neu" | "neg",
  "importance": 1-5 (1=trivial, 5=cr√≠tico),
  "summary": "resumo de 1-2 linhas do conte√∫do principal"
}

Regras:
- Extraia apenas o que est√° expl√≠cito ou claramente impl√≠cito
- Datas devem ser normalizadas para formato ISO YYYY-MM-DD
- Sentiment: pos=positivo/animado, neu=neutro/informativo, neg=frustra√ß√£o/problema
- Importance: baseie-se em urg√™ncia, impacto e emo√ß√£o
- Summary: seja conciso mas informativo
- Se n√£o houver conte√∫do para algum campo, use lista vazia []""",

    "context_builder": """Voc√™ √© um assistente de produtividade que constr√≥i pain√©is de contexto. 

Baseado nas mem√≥rias fornecidas, construa um **Painel de Contexto** estruturado com:

1. **"Onde parei"** (3 bullets m√°ximo): √∫ltimas a√ß√µes, estado atual, momentum
2. **"Metas e prazos"**: objetivos ativos e datas importantes  
3. **"Bloqueios e hip√≥teses"**: obst√°culos identificados e teorias sobre solu√ß√µes
4. **"Pr√≥ximas a√ß√µes"** (3-5 itens): passos concretos priorizados por impacto

Responda APENAS com JSON no formato:
{
  "where_stopped": ["a√ß√£o/estado 1", "a√ß√£o/estado 2", "a√ß√£o/estado 3"],
  "goals_deadlines": ["meta com prazo 1", "meta 2"],
  "blockers_hypotheses": ["bloqueio: hip√≥tese 1", "bloqueio: hip√≥tese 2"], 
  "next_actions": ["a√ß√£o espec√≠fica 1", "a√ß√£o espec√≠fica 2", "a√ß√£o espec√≠fica 3"]
}

Seja espec√≠fico, acion√°vel e direto. Evite generalidades.""",

    "reflection": """Voc√™ √© um coach de reflex√£o estrat√©gica. Analise o hist√≥rico de mem√≥rias e identifique:

**CONTRADI√á√ïES**: Decis√µes/a√ß√µes que conflitam com metas declaradas
**PERGUNTAS PROFUNDAS**: 3 quest√µes que ajudam a esclarecer prioridades e dire√ß√£o  
**NUDGES PR√ÅTICOS**: 3 lembretes/sugest√µes diretas para destravar ou manter momentum
**PR√ìXIMOS PASSOS**: At√© 5 a√ß√µes concretas priorit√°rias

Responda APENAS com JSON:
{
  "contradictions": ["contradi√ß√£o 1", "contradi√ß√£o 2"],
  "deep_questions": ["pergunta reflexiva 1", "pergunta 2", "pergunta 3"],
  "nudges": ["nudge pr√°tico 1", "nudge 2", "nudge 3"], 
  "next_actions": ["a√ß√£o 1", "a√ß√£o 2", "a√ß√£o 3", "a√ß√£o 4", "a√ß√£o 5"]
}

Seja direto, espec√≠fico e √∫til. Evite autoajuda gen√©rica.""",

    "quick_answer": """Voc√™ √© um assistente que usa as mem√≥rias pessoais do usu√°rio para dar respostas diretas e √∫teis. Baseado nas mem√≥rias fornecidas, responda de forma direta e acion√°vel em 2-3 par√°grafos. Se n√£o h√° informa√ß√£o suficiente, sugira que tipo de mem√≥ria seria √∫til adicionar."""
}

# Emojis para interface
EMOJIS = {
    "tipos": {
        "note": "üìù",
        "email": "üìß", 
        "chat": "üí¨",
        "pdf": "üìÑ",
        "task": "‚úÖ",
        "web": "üåê"
    },
    "nudges": {
        "goal_stalled": "üò¥",
        "contradiction": "‚ö†Ô∏è",
        "deadline_approaching": "‚è∞",
        "repeated_blocker": "üîÑ"
    },
    "sentimentos": {
        "pos": "üòä",
        "neu": "üòê", 
        "neg": "üòü"
    }
}

# Valida√ß√£o da configura√ß√£o
def validate_config():
    """Valida se a configura√ß√£o est√° correta"""
    if not Config.GOOGLE_API_KEY:
        return False, "GOOGLE_API_KEY n√£o configurada"
    
    # Verifica se os diret√≥rios podem ser criados
    try:
        import os
        os.makedirs(os.path.dirname(Config.SQLITE_PATH), exist_ok=True)
        os.makedirs(Config.CHROMA_PATH, exist_ok=True)
        return True, "Configura√ß√£o v√°lida"
    except Exception as e:
        return False, f"Erro ao criar diret√≥rios: {e}"

if __name__ == "__main__":
    valid, msg = validate_config()
    print(f"Configura√ß√£o: {msg}")
    if valid:
        print("‚úÖ Pronto para usar!")
    else:
        print("‚ùå Configure a API key do Google Gemini")
