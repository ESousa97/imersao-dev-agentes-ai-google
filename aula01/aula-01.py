me de ideias para meu agente:

quero algo que não tenha atualmente e que possa ser usado por qualquer pessoa:

# -*- coding: utf-8 -*-
"""Imersão_Agentes_de_IA_Alura_+_Google_Gemini_ipynb_Aula_01_refatorado_comentado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-KRjHc5BxAejKojPXVnnqfCy9sZBxYUT

# Imersão Alura + Google Gemini – Aula 01

# Aula 1
"""

# [Célula 1] Importações de bibliotecas e configuração inicial. | Integração com a API do Google Gemini / IA generativa.
import os
from langchain_google_genai import ChatGoogleGenerativeAI

# Para rodar localmente, você pode:
# 1. Definir a variável de ambiente: set GOOGLE_API_KEY=sua_chave_aqui
# 2. Ou descomentar a linha abaixo e inserir sua API key diretamente
# GOOGLE_API_KEY = "sua_api_key_aqui"

GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    GOOGLE_API_KEY = input("Digite sua API Key do Google Gemini: ")

# [Célula 3] Integração com a API do Google Gemini / IA generativa.
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",  # Modelo disponível e estável
    temperature=0,
    api_key=GOOGLE_API_KEY,
)

# [Célula 4] Exploração rápida/prints e visualização de saídas.
resp_test = llm.invoke("Quem é você? Seja criativo.")
print(resp_test.content)

# [Célula 5] Interações com o sistema de arquivos/ambiente.
TRIAGEM_PROMPT = (
    "Você é um triador de Service Desk para políticas internas da empresa Carraro Desenvolvimento. "
    "Dada a mensagem do usuário, retorne SOMENTE um JSON com:\n"
    "{\n"
    '  "decisao": "AUTO_RESOLVER" | "PEDIR_INFO" | "ABRIR_CHAMADO",\n'
    '  "urgencia": "BAIXA" | "MEDIA" | "ALTA",\n'
    '  "campos_faltantes": ["..."]\n'
    "}\n"
    "Regras:\n"
    '- **AUTO_RESOLVER**: Perguntas claras sobre regras ou procedimentos descritos nas políticas (Ex: "Posso reembolsar a internet do meu home office?", "Como funciona a política de alimentação em viagens?").\n'
    '- **PEDIR_INFO**: Mensagens vagas ou que faltam informações para identificar o tema ou contexto (Ex: "Preciso de ajuda com uma política", "Tenho uma dúvida geral").\n'
    '- **ABRIR_CHAMADO**: Pedidos de exceção, liberação, aprovação ou acesso especial, ou quando o usuário explicitamente pede para abrir um chamado (Ex: "Quero exceção para trabalhar 5 dias remoto.", "Solicito liberação para anexos externos.", "Por favor, abra um chamado para o RH.").'
    "Analise a mensagem e decida a ação mais apropriada."
)

# [Célula 6] Importações de bibliotecas e configuração inicial. | Definição de funções/classes para modularizar a lógica.
from pydantic import BaseModel, Field
from typing import Literal, List, Dict

class TriagemOut(BaseModel):
    decisao: Literal["AUTO_RESOLVER", "PEDIR_INFO", "ABRIR_CHAMADO"]
    urgencia: Literal["BAIXA", "MEDIA", "ALTA"]  # Corrigido: era "ugencia"
    campos_faltantes: List[str] = Field(default_factory=list)

# [Célula 7] Integração com a API do Google Gemini / IA generativa.
llm_triagem = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash",  # Modelo disponível e estável
    temperature=0,
    api_key=GOOGLE_API_KEY,
)

# [Célula 8] Definição de funções/classes para modularizar a lógica.
from langchain_core.messages import SystemMessage, HumanMessage

triagem_chain = llm_triagem.with_structured_output(TriagemOut)

def triagem(mensagem: str) -> Dict:
  saida: TriagemOut = triagem_chain.invoke([
      SystemMessage(content=TRIAGEM_PROMPT),
      HumanMessage(content=mensagem)
  ])

  return saida.model_dump()

# [Célula 9] Bloco de código geral.
testes = ["Posso reembolsar a internet?",
          "Quero ter mais 5 dias de trabalho remoto, como faço?",
          "Posso reembolsar cursos ou treinamentos da Alura?",
          "Quantas capivaras tem no Rio Pinheiros?"]

# [Célula 10] Exploração rápida/prints e visualização de saídas. | Laços de repetição para processar coleções.
def main():
    """Função principal para executar os testes"""
    print("=== Teste inicial do modelo ===")
    resp_test = llm.invoke("Quem é você? Seja criativo.")
    print(resp_test.content)
    print("\n" + "="*50 + "\n")
    
    print("=== Testes de Triagem ===")
    for msg_test in testes:
        print(f"Pergunta: {msg_test}")
        resultado = triagem(msg_test)
        print(f" -> Resposta: {resultado}\n")

if __name__ == "__main__":
    main()
    